// _mixim.scss

/* mixim
---------------------------------------------------------------------------------------*/

@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
     -moz-border-radius: $radius;
      -ms-border-radius: $radius;
          border-radius: $radius;
}
@mixin background($url,$w,$h){
	background:url($url) no-repeat 0 0;
	-webkit-background-size:$w $h;
	background-size:$w $h;
	
}
@mixin background-size($url,$left,$top,$w,$h) {
  background:url($url) $left $top no-repeat;
  -webkit-background-size: $w $h;
     -moz-background-size: $w $h;
      -ms-background-size: $w $h;
          background-size: $w $h;
}
@mixin background-cover($img-uri) {
    background: url($img-uri) center bottom no-repeat;
    -webkit-background-size: cover;
    -moz-background-size: cover;
    -o-background-size: cover;
    background-size: cover;
}
@mixin background-image-retina($file, $type, $width, $height) {
  background-image: url($file + '.' + $type);
  @media only screen and (-webkit-min-device-pixel-ratio: 2),
    only screen and (-moz-min-device-pixel-ratio: 2),
    only screen and (-o-min-device-pixel-ratio: 2/1),
    only screen and (min-device-pixel-ratio: 2),
    only screen and (min-resolution: 192dpi),
    only screen and (min-resolution: 2dppx){
    & {
      background-image: url($file + '@2x.' + $type);
      -webkit-background-size: $width $height;
      -moz-background-size: $width $height;
      -o-background-size: $width $height;
      background-size: $width $height;
    }
  }
}
@mixin background-gradient($start-colour, $end-colour) {
    background-color: $start-colour;
    background-image: -webkit-gradient(linear, left top, left bottom, from($start-colour), to($end-colour));
    background-image: -webkit-linear-gradient(top, $start-colour, $end-colour);
    background-image:    -moz-linear-gradient(top, $start-colour, $end-colour);
    background-image:     -ms-linear-gradient(top, $start-colour, $end-colour);
    background-image:      -o-linear-gradient(top, $start-colour, $end-colour);
    background-image:         linear-gradient(top, $start-colour, $end-colour);
    filter:            progid:DXImageTransform.Microsoft.gradient(start-colourStr='#{$start-colour}', end-colourStr='#{$end-colour}');
}
@mixin transition($target,$second,$effect){
	-webkit-transition:$target $second $effect;
	-moz-transition:$target $second $effect;
	-ms-transition:$target $second $effect;
	transition:$target $second $effect;
}
@mixin margin($t,$r,$b,$l){
	margin:$t+px $r+px $b+px $l+px;
	margin:($t/$rembase)+rem ($r/$rembase)+rem ($b/$rembase)+rem ($l/$rembase)+rem;
}
@mixin padding($t,$r,$b,$l){
	padding:$t+px $r+px $b+px $l+px;
	padding:($t/$rembase)+rem ($r/$rembase)+rem ($b/$rembase)+rem ($l/$rembase)+rem;
}
@mixin clr {
  &:after {
  	content:".";
	display:block;
	clear:both;
	font-size:0;
	height:0;
	visibility:hidden;
  }
}
@mixin blind {
	visibility:hidden;
	overflow:hidden;
	position:absolute;
	width:0;height:0;
	font-size:0;
	line-height:0;
	text-indent:-9999em;
}
@mixin  gbox($top:35px,$right:15px,$bottom:35px,$left:15px){
	padding:$top $right $bottom $left;
}
@mixin global-w($w:1000px){
	max-width:$w;
	margin:0 auto;
}
@mixin font-size($val){
	font-size:$val+px;
	font-size:($val/$rembase)+rem;
}
@mixin font-size-mq($fs-map, $fs-breakpoints:$breakpoints) {
  @each $fs-breakpoint, $fs-font-size in $fs-map {
    @if $fs-breakpoint == null {
      font-size:$fs-font-size+px;
      font-size:($fs-font-size/$rembase)+rem;
    }
    @else {
      // If $fs-font-size is a key that exists in
      // $fs-breakpoints, use the value
      @if map-has-key($fs-breakpoints, $fs-breakpoint) {
        $fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);
      }
      @media screen and (min-width: $fs-breakpoint) {
        font-size:$fs-font-size+px;
         font-size:($fs-font-size/$rembase)+rem;
      }
    }
  }
}

